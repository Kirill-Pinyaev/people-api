openapi: 3.0.3
info:
  title: People API
  version: 1.0.0
  description: |
    REST API для хранения информации о людях, их email-адресах и дружбе.
servers:
  - url: http://localhost:8082
paths:
  /v1/people:
    get:
      summary: Список людей
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Person' }
    post:
      summary: Создать человека (атрибуты берутся из внешних сервисов, если не указаны)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePersonRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Person' }
  /v1/people/{id}:
    get:
      summary: Получить человека по ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Person' }
        '404': { description: Not found }
    patch:
      summary: Изменить информацию о пользователе
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePersonRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Person' }
  /v1/people/surname/{last_name}:
    get:
      summary: Получить сводную информацию о людях по фамилии
      parameters:
        - in: path
          name: last_name
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Person' }
  /v1/people/{id}/emails:
    post:
      summary: Добавить email
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                is_primary: { type: boolean, default: false }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Email' }
    get:
      summary: Список email'ов пользователя
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Email' }
  /v1/people/{id}/emails/{email_id}:
    delete:
      summary: Удалить email
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: path
          name: email_id
          required: true
          schema: { type: integer }
      responses:
        '204': { description: No content }
        '404': { description: Not found }
  /v1/people/{id}/friends:
    get:
      summary: Получить список друзей пользователя
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Person' }
  /v1/people/{id}/friends/{friend_id}:
    post:
      summary: Подружить двух пользователей
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: path
          name: friend_id
          required: true
          schema: { type: integer }
      responses:
        '201': { description: Created }
    delete:
      summary: Раздружить двух пользователей
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: path
          name: friend_id
          required: true
          schema: { type: integer }
      responses:
        '204': { description: No content }

components:
  schemas:
    Person:
      type: object
      properties:
        id: { type: integer }
        first_name: { type: string }
        middle_name: { type: string, nullable: true }
        last_name: { type: string }
        gender: { type: string, nullable: true }
        nationality: { type: string, nullable: true, description: "2-буквенный код ISO страны" }
        age: { type: integer, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        emails:
          type: array
          items: { $ref: '#/components/schemas/Email' }
        friends_count: { type: integer }
    Email:
      type: object
      properties:
        id: { type: integer }
        person_id: { type: integer }
        email: { type: string, format: email }
        is_primary: { type: boolean }
        created_at: { type: string, format: date-time }
    CreatePersonRequest:
      type: object
      required: [first_name, last_name]
      properties:
        first_name: { type: string }
        middle_name: { type: string, nullable: true }
        last_name: { type: string }
        gender: { type: string, nullable: true }
        nationality: { type: string, nullable: true }
        age: { type: integer, nullable: true }
        emails:
          type: array
          items:
            type: object
            properties:
              email: { type: string, format: email }
              is_primary: { type: boolean, default: false }
    UpdatePersonRequest:
      type: object
      properties:
        first_name: { type: string }
        middle_name: { type: string, nullable: true }
        last_name: { type: string }
        gender: { type: string, nullable: true }
        nationality: { type: string, nullable: true }
        age: { type: integer, nullable: true }
